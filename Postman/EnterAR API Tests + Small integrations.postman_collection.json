{
	"info": {
		"_postman_id": "5413d768-7288-499b-8589-333c54328483",
		"name": "EnterAR API Tests + Small integrations",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "25924841"
	},
	"item": [
		{
			"name": "Projects",
			"item": [
				{
					"name": "Create Project",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Arrange\r",
									"let backendURL = pm.variables.get(\"backendurl\")\r",
									"let sdk = require('postman-collection')\r",
									"// find project that was created\r",
									"const getProject = (projectId) => new sdk.Request({\r",
									"    url: backendURL + \"/projects/\" + projectId,\r",
									"    method: \"GET\",\r",
									"    header: [\r",
									"        new sdk.Header({\r",
									"            key: 'content-type',\r",
									"            value: 'application/json'\r",
									"        }),\r",
									"        new sdk.Header({\r",
									"            key: 'acccept',\r",
									"            value: 'application/json'\r",
									"        }),\r",
									"        new sdk.Header({\r",
									"            key: 'Authorization',\r",
									"            value: 'Bearer ' + pm.variables.get(\"eartoken\"),\r",
									"        }),\r",
									"    ]\r",
									"})\r",
									"\r",
									"// Test cases\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Created project is queryable\", function () {\r",
									"    let projectId = pm.response.json()\r",
									"\r",
									"    pm.sendRequest(getProject(projectId), function (err, response) {\r",
									"        let selectedProject = response.json()\r",
									"        pm.expect(selectedProject.Id).to.eql(projectId)\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let authURL = pm.variables.get(\"authURL\")\r",
									"let backendURL = pm.variables.get(\"backendurl\")\r",
									"let username = pm.variables.get(\"testUsername\")\r",
									"let password = pm.variables.get(\"testUserPassword\")\r",
									"\r",
									"let sdk = require('postman-collection')\r",
									"\r",
									"let authRequest = new sdk.Request({\r",
									"    url: backendURL + authURL,\r",
									"    method: \"POST\",\r",
									"    header: [\r",
									"        new sdk.Header({\r",
									"            key: 'content-type',\r",
									"            value: 'application/json'\r",
									"        }),\r",
									"        new sdk.Header({\r",
									"            key: 'acccept',\r",
									"            value: 'application/json'\r",
									"        }),\r",
									"    ],\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({\r",
									"            username: username,\r",
									"            password: password\r",
									"        })\r",
									"    } \r",
									"})\r",
									"\r",
									"pm.sendRequest(authRequest, function (err, response) {\r",
									"    if (err) {\r",
									"        throw err;\r",
									"    }\r",
									"      \r",
									"      if (response.code !== 200) {\r",
									"          throw new Error('Could not log in.');\r",
									"      }\r",
									"\r",
									"      pm.variables.set(\"eartoken\", response.json().Token);\r",
									"      console.log(`New token has been set: ${response.json().Token}`);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Name\":\"4444\",\r\n    \"CityName\":\"TownCity\"\r\n}"
						},
						"url": {
							"raw": "{{backendurl}}/projects",
							"host": [
								"{{backendurl}}"
							],
							"path": [
								"projects"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Project",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let authURL = pm.variables.get(\"authURL\")\r",
									"let backendURL = pm.variables.get(\"backendurl\")\r",
									"let username = pm.variables.get(\"testUsername\")\r",
									"let password = pm.variables.get(\"testUserPassword\")\r",
									"\r",
									"let sdk = require('postman-collection')\r",
									"\r",
									"let authRequest = new sdk.Request({\r",
									"    url: backendURL + authURL,\r",
									"    method: \"POST\",\r",
									"    header: [\r",
									"        new sdk.Header({\r",
									"            key: 'content-type',\r",
									"            value: 'application/json'\r",
									"        }),\r",
									"        new sdk.Header({\r",
									"            key: 'acccept',\r",
									"            value: 'application/json'\r",
									"        }),\r",
									"    ],\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({\r",
									"            username: username,\r",
									"            password: password\r",
									"        })\r",
									"    } \r",
									"})\r",
									"\r",
									"// authorize first\r",
									"\r",
									"pm.sendRequest(authRequest, function (err, response) {\r",
									"    if (err) {\r",
									"        throw err;\r",
									"    }\r",
									"      \r",
									"      if (response.code !== 200) {\r",
									"          throw new Error('Could not log in.');\r",
									"      }\r",
									"\r",
									"      pm.variables.set(\"eartoken\", response.json().Token);\r",
									"      console.log(`New token has been set: ${response.json().Token}`);\r",
									"});\r",
									"\r",
									"// create project second\r",
									"\r",
									"let projectCreation = new sdk.Request({\r",
									"    url: backendURL + \"/projects\",\r",
									"    method: \"POST\",\r",
									"    header: [\r",
									"        new sdk.Header({\r",
									"            key: 'content-type',\r",
									"            value: 'application/json'\r",
									"        }),\r",
									"        new sdk.Header({\r",
									"            key: 'acccept',\r",
									"            value: 'application/json'\r",
									"        }),\r",
									"        new sdk.Header({\r",
									"            key: 'Authorization',\r",
									"            value: 'Bearer ' + pm.variables.get(\"eartoken\"),\r",
									"        }),\r",
									"    ],\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({\r",
									"                Name: \"Scam Foundation\",\r",
									"                CityName: \"NYC\"\r",
									"        })\r",
									"    } \r",
									"})\r",
									"\r",
									"pm.sendRequest(projectCreation, function (err, response) {\r",
									"    if (err) {\r",
									"        throw err;\r",
									"    }\r",
									"\r",
									"    pm.variables.set(\"createdProjectId\", response.json())\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Arrange\r",
									"let backendURL = pm.variables.get(\"backendurl\")\r",
									"let sdk = require('postman-collection')\r",
									"// find project that was created\r",
									"const getProject = (projectId) => new sdk.Request({\r",
									"    url: backendURL + \"/projects/\" + projectId,\r",
									"    method: \"GET\",\r",
									"    header: [\r",
									"        new sdk.Header({\r",
									"            key: 'content-type',\r",
									"            value: 'application/json'\r",
									"        }),\r",
									"        new sdk.Header({\r",
									"            key: 'acccept',\r",
									"            value: 'application/json'\r",
									"        }),\r",
									"        new sdk.Header({\r",
									"            key: 'Authorization',\r",
									"            value: 'Bearer ' + pm.variables.get(\"eartoken\"),\r",
									"        }),\r",
									"    ]\r",
									"})\r",
									"\r",
									"// Test cases\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Project holds new name that was given after update\", function () {\r",
									"    let projectId = pm.variables.get(\"createdProjectId\")\r",
									"\r",
									"    pm.sendRequest(getProject(projectId), function (err, response) {\r",
									"        let selectedProject = response.json()\r",
									"        pm.expect(selectedProject.Name).to.eql(\"Fishing Project\")\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Name\": \"Fishing Project\",\r\n    \"CityName\": \"TownCity\"\r\n}"
						},
						"url": {
							"raw": "{{backendurl}}/projects/{{createdProjectId}}",
							"host": [
								"{{backendurl}}"
							],
							"path": [
								"projects",
								"{{createdProjectId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Project",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test cases\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let authURL = pm.variables.get(\"authURL\")\r",
									"let backendURL = pm.variables.get(\"backendurl\")\r",
									"let username = pm.variables.get(\"testUsername\")\r",
									"let password = pm.variables.get(\"testUserPassword\")\r",
									"\r",
									"let sdk = require('postman-collection')\r",
									"\r",
									"let authRequest = new sdk.Request({\r",
									"    url: backendURL + authURL,\r",
									"    method: \"POST\",\r",
									"    header: [\r",
									"        new sdk.Header({\r",
									"            key: 'content-type',\r",
									"            value: 'application/json'\r",
									"        }),\r",
									"        new sdk.Header({\r",
									"            key: 'acccept',\r",
									"            value: 'application/json'\r",
									"        }),\r",
									"    ],\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({\r",
									"            username: username,\r",
									"            password: password\r",
									"        })\r",
									"    } \r",
									"})\r",
									"\r",
									"// authorize first\r",
									"\r",
									"pm.sendRequest(authRequest, function (err, response) {\r",
									"    if (err) {\r",
									"        throw err;\r",
									"    }\r",
									"      \r",
									"      if (response.code !== 200) {\r",
									"          throw new Error('Could not log in.');\r",
									"      }\r",
									"\r",
									"      pm.variables.set(\"eartoken\", response.json().Token);\r",
									"      console.log(`New token has been set: ${response.json().Token}`);\r",
									"});\r",
									"\r",
									"// create project second\r",
									"\r",
									"let projectCreation = new sdk.Request({\r",
									"    url: backendURL + \"/projects\",\r",
									"    method: \"POST\",\r",
									"    header: [\r",
									"        new sdk.Header({\r",
									"            key: 'content-type',\r",
									"            value: 'application/json'\r",
									"        }),\r",
									"        new sdk.Header({\r",
									"            key: 'acccept',\r",
									"            value: 'application/json'\r",
									"        }),\r",
									"        new sdk.Header({\r",
									"            key: 'Authorization',\r",
									"            value: 'Bearer ' + pm.variables.get(\"eartoken\"),\r",
									"        }),\r",
									"    ],\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({\r",
									"                Name: \"Scam Foundation\",\r",
									"                CityName: \"NYC\"\r",
									"        })\r",
									"    } \r",
									"})\r",
									"\r",
									"pm.sendRequest(projectCreation, function (err, response) {\r",
									"    if (err) {\r",
									"        throw err;\r",
									"    }\r",
									"\r",
									"    pm.variables.set(\"createdProjectId\", response.json())\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{backendurl}}/projects/{{createdProjectId}}",
							"host": [
								"{{backendurl}}"
							],
							"path": [
								"projects",
								"{{createdProjectId}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{eartoken}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "backendurl",
			"value": "http://localhost:5000",
			"type": "string"
		},
		{
			"key": "eartoken",
			"value": "",
			"type": "string"
		},
		{
			"key": "authURL",
			"value": "/authenticate",
			"type": "string"
		},
		{
			"key": "testUsername",
			"value": "powUser",
			"type": "string"
		},
		{
			"key": "testUserPassword",
			"value": "pwd947SBC",
			"type": "string"
		},
		{
			"key": "createdProjectId",
			"value": "",
			"type": "string"
		}
	]
}